using FirstWebApp.Infrastructure;
using FirstWebApp.Models;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;

/*TestTuples();
var user = new User { UserId = 1, Username = "Sample", EmailId = "someone@example.com" };
int id = user.UserId;
string name = user.Username;
(int id1, string name1) = user;  //using the Deconstruct
Console.WriteLine(id1 + ". " + name1);
Customer cust = new Customer { CustomerId = "", CompanyName = "" };
(string custId, string company) = cust;


static void TestTuples()
{
    //Tuple is a row of different type of values 
    //used as data placeholder 
    //use the  ( ) to define a tuple 
    var myRow = (Id: 1, Value: "One");
    Console.WriteLine(myRow.Id + ", " + myRow.Value);
    Console.WriteLine(myRow);
    var myRow2 = (1, "One");
    Console.WriteLine(myRow2);
    (int, string) obj1 = (100, "One Hundred");
    Console.WriteLine($"{obj1.Item1}, {obj1.Item2}");
    (int Id, string Name) obj2 = (100, "One Hundred");
    Console.WriteLine($"{obj2.Id}, {obj2.Name}");
    var myRow3 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);
    Console.WriteLine(myRow3.Item20);

    var retVal = GetValues();
    Console.WriteLine(retVal);
    int _id = 0; string _name = "";
    (_id, _name) = (200, "Value");
    Console.WriteLine(_id + ". " + _name );

    (string Name, string Value) GetValues()
    {
        return (Name: "Sample", Value: "Sample");
    }
}*/



var builder = WebApplication.CreateBuilder(args);

// Add DI services to the DI container.

//Dependency Injection 
builder.Services.AddDbContext<NorthwindContext>(options =>
{
    options.UseSqlServer(
        connectionString: @"Server=SNWIN10WK;Database=Northwind;Integrated Security=SSPI;TrustServerCertificate=true"
    );
});
builder.Services.AddDbContext<EmployeesDbContext>(options =>
{
    options.UseSqlServer(
        connectionString: @"Server=SNWIN10WK;Database=Northwind;Integrated Security=SSPI;TrustServerCertificate=true"
    );
});
builder.Services.AddDbContext<BooksDbContext>(options =>
{
    options.UseSqlServer(
        connectionString: @"Server=SNWIN10WK;Database=BooksDB;Integrated Security=SSPI;TrustServerCertificate=true"
    );
});
builder.Services.AddDbContext<UsersDbContext>(options =>
{
    options.UseSqlServer(
        connectionString: @"Server=SNWIN10WK;Database=TexiioUsersDB;Integrated Security=SSPI;TrustServerCertificate=true"
    );
});
//builder.Services.AddScoped<IRepository<Customer, string>, CustomerListRepository>();
builder.Services.AddScoped<IRepository<Customer, string>, CustomerEFRepository>();

builder.Services.AddScoped<IUserService, UserService>();


builder.Services.AddAuthentication(
    defaultScheme: CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(configureOptions: options =>
    {
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
        options.LoginPath = "/accounts/login";
        options.SlidingExpiration = false; //Does not expire the cookie based on idle timeout
    });

builder.Services.AddSession(options =>
{
    options.Cookie.HttpOnly = true;
    options.IdleTimeout = TimeSpan.FromMinutes(20);
});

builder.Services.AddControllersWithViews().AddSessionStateTempDataProvider();

var app = builder.Build();


// Configure the HTTP request pipeline.
//Exception Handling Middleware 
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
}
//Next Middleware - handle the static files (.html, .js, .css, .png, .XXXX ) 
app.UseStaticFiles();

//Next Middleware - Routing Infrastructure - the incoming URL is broken down into various parts or segments 
app.UseRouting();

//Next Middleware - Securing the application - UseAuthentication and UseAuthorization 
//verifies the credentials of the user and access control rights of the authenticated user 
app.UseAuthentication();
app.UseAuthorization();

app.UseSession();


//Middleware - map the ROute Data generated by the Routing Infrastructure with a controller/action 
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

//Default values for the controller and action segments - URL does not contain controller segment, then Home is the default value. 
//For URLs -> http://localhost:5133/  or http://localhost:5133/Home or http://localhost:5133/Home/Index 
// the controller - Home, Action - Index
app.Run();
